package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultSERVICES_MockAuthServiceTemplate = `
/* Generated by egg v0.0.1 */

package services

import (
	"context"
	//"time"

	"github.com/adamkali/egg/internal/repository"
)

// AuthService provides authentication services, including creating and checking tokens.
// the MockAuthService struct implements the IAuthService interface. And provides dummy functions
// to obfuscate the connections to the database, as well as the creation of tokens.
// this allows us to test the authentication services without having to connect to a real database.
//
// type IAuthService interface {
// 	Create(user *repository.User) (*string, error)
//  	Update(user repository.User) (*string, error)
// 	CheckToken(token string) error
// }

type MockAuthService struct {
	ctx  context.Context
}

func (MockAuthService *MockAuthService) Create(user *repository.User) (*string, error) {
	// create a dummy token that is 64 characters long
	token := "a============================================================//a"
	return &token, nil
}

func (MockAuthService *MockAuthService) Update(user repository.User) (*string, error) {
	// create a dummy token that is 64 characters long
	token := "a============================================================//a"
	return &token, nil
}

func (MockAuthService *MockAuthService) CheckToken(token string) error {
	return nil
}
`

func TestSERVICES_MockAuthServiceTemplate(t *testing.T) {
	// load the template
	temp := templates.SERVICES_MockAuthServiceTemplate
	templateTest := template.Must(template.New("mock_auth_service.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "mock_auth_service.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultSERVICES_MockAuthServiceTemplate {
		diff := Diff(stringWriter.String(), ResultSERVICES_MockAuthServiceTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
