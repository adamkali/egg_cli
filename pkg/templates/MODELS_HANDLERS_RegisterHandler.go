package templates

const MODELS_HANDLERS_RegisterHandlerTemplate = `
/* Generated by egg v0.0.1 */

package handlers

import (
	"fmt"

	"{{.Namespace}}/internal/repository"
	"{{.Namespace}}/models/requests"
	"{{.Namespace}}/models/responses"
	"github.com/labstack/echo/v4"
)

type RegisterHandler struct {
	RegisterRequest *requests.NewUserRequest
	NewUser         *repository.User
	Token           *string
	Context         echo.Context
	Error           error
	Code            int
	Locked          bool
}

func NewRegisterHandler(ctx echo.Context) *RegisterHandler {
	return &RegisterHandler{
		Context: ctx,
		Locked:  false,
		Error:   nil,
		Code:    200,
	}
}
func (h *RegisterHandler) Lock(code int) *RegisterHandler {
	h.Locked = true
	h.Code = code
	return h
}

func (h *RegisterHandler) Handle(fun any) *RegisterHandler {
	var code int
	if !h.Locked {
		switch handle := fun.(type) {
		case func(e echo.Context) (*requests.NewUserRequest, error):
			h.RegisterRequest, h.Error = handle(h.Context)
		case func(params *requests.NewUserRequest) (*repository.User, error):
			h.NewUser, h.Error = handle(h.RegisterRequest)
		case func(user *repository.User) (*string, error):
			h.Token, h.Error = handle(h.NewUser)
		default:
			code = 600
			h.Error = echo.NewHTTPError(
				code,
				fmt.Sprintf("Type assertion failed for type: %T\n", fun),
			)
		}
		if h.Error != nil {
			return h.Lock(code)
		}
	}
	return h
}

func (h *RegisterHandler) JSON() error {
	var code int
	var message string
	if h.Locked && h.Error != nil {
		code = h.Code
		if code == 600 {
			message = "Misaligend handler on the server"
		} else {
			message = h.Error.Error()
		}
	} else {
		message = "OK"
		code = 200
	}
	return h.Context.JSON(code, responses.LoginResponse{
		Data:    responses.UserDataFromRepository(h.NewUser),
		Success: !h.Locked,
		Message: message,
		JWT:     *h.Token,
	})

}
`
