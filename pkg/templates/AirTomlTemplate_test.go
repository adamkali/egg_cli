package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultAirTomlTemplate = `
# Generated by egg v0.0.1
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  args_bin = []
  bin = "./tmp/egg"
  cmd = "make build-backend"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor", "testdata", "frontend", "docs"]
  exclude_file = []
  exclude_regex = ["_test.go", "_templ.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html", "tsx", "templ", "css"]
  include_file = []
  kill_delay = "0s"
  log = "build-errors.log"
  poll = false
  poll_interval = 0
  post_cmd = []
  pre_cmd = []
  rerun = false
  rerun_delay = 500
  send_interrupt = false
  stop_on_error = false

[color]
  app = "blue"
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  main_only = false
  time = false

[misc]
  clean_on_exit = false

[proxy]
  app_port = 0
  enabled = false
  proxy_port = 0

[screen]
  clear_on_rebuild = false
  keep_scroll = true
`

func TestAirTomlTemplate(t *testing.T) {
	// load the template 
	temp := templates.AirTomlTemplate
	templateTest := template.Must(template.New("air.toml").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "air.toml", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	// check the result
	if stringWriter.String() != ResultAirTomlTemplate{
		diff := Diff(stringWriter.String(), ResultAirTomlTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}


