package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMODELS_RESPONSE_UserResponseTemplate = `
/* Generated by egg v0.0.1 */

package responses

import (
	"errors"
	"time"

	"github.com/adamkali/egg/internal/repository"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

type UserData struct {
	ID              uuid.UUID  ` + "`" + `json:"id"` + "`" + `
	Email           string     ` + "`" + `json:"email"` + "`" + `
	Username        string     ` + "`" + `json:"username"` + "`" + `
	CreatedDatetime *time.Time ` + "`" + `json:"created_datetime"` + "`" + `
	UpdatedDatetime *time.Time ` + "`" + `json:"updated_datetime"` + "`" + `
	ProfilePicUrl   *string    ` + "`" + `json:"profile_pic_url"` + "`" + `
	Admin           bool       ` + "`" + `json:"admin"` + "`" + `
}

type UserResponse struct {
	Data    *UserData ` + "`" + `json:"data"` + "`" + `
	Success bool     ` + "`" + `json:"success"` + "`" + `
	Message string   ` + "`" + `json:"message"` + "`" + `
} // @name UserResponse

func UserDataFromRepository(repository *repository.User) *UserData {
	if repository == nil {
		return nil
	}
	return &UserData{
		ID:              repository.ID,
		Email:           repository.Email,
		Username:        repository.Username,
		CreatedDatetime: repository.CreatedDatetime,
		UpdatedDatetime: repository.UpdatedDatetime,
		ProfilePicUrl:   repository.ProfilePicUrl,
		Admin:           repository.Admin,
	}
}

func NewUserResponse() *UserResponse {
	return &UserResponse{Success: false, Message: ""}
}

func (UserResponse *UserResponse) Fail(ctx echo.Context, code int, err error) error {
	UserResponse.Message = err.Error()
	return ctx.JSON(code, UserResponse)
}

func (UserResponse *UserResponse) Successful(ctx echo.Context, user *repository.User) error {
	UserResponse.Data = UserDataFromRepository(user)
	UserResponse.Success = true
	return ctx.JSON(200, UserResponse)
}

func (ur *UserResponse) Component(
	ctx echo.Context,
	user *repository.User,
	code int,
	err error,
) error {
	return errors.New("oops")
}
`

func TestMODELS_RESPONSE_UserResponseTemplate(t *testing.T) {
	// load the template
	temp := templates.MODELS_RESPONSE_UserResponseTemplate
	templateTest := template.Must(template.New("user_response.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "user_response.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMODELS_RESPONSE_UserResponseTemplate {
		diff := Diff(stringWriter.String(), ResultMODELS_RESPONSE_UserResponseTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
