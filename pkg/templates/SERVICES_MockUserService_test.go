package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultSERVICES_MockUserServiceTemplate = `
/* Generated by egg v0.0.1 */

package services

import (
	"context"

	"github.com/adamkali/egg/internal/repository"
	"github.com/adamkali/egg/models/requests"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

type MockUserService struct {
	ctx  context.Context		
	pool *pgxpool.Pool
}

// CreateMockUserService returns a reference to a new MockUserService to be used in the controller
func CreateMockUserService(ctx context.Context, pool *pgxpool.Pool) *MockUserService {
	return &MockUserService{
		ctx:  ctx,
		pool: pool,
	}
}

func (service *MockUserService) Create(params *requests.NewUserRequest) (*repository.User, error) {
	BCryptHash, err := hashPassword(params.Password)
	if err != nil {
		return nil, err
	}

	userID := uuid.New()
	user := repository.User{
		ID:       userID,
		Username: params.Username,
		Email:    params.Email,
		BCryptHash: BCryptHash,
		Admin:  params.IsAdmin,
	}
	return &user, nil
}
func (service *MockUserService) Get(id uuid.UUID) (*repository.User, error) {
	user := repository.User{
		ID:       id,
		Username: "testuser",
		Email:    "@example.com",
		BCryptHash: "----------------",
		Admin:  true,
	}
	return &user, nil
}
func (servic *MockUserService) Login(params *requests.LoginRequest) (*repository.User, error) {
	user := &repository.User{
		ID:       uuid.New(),
		Username: params.Username,
		Email: params.Email,
		BCryptHash: "----------------",
		Admin:  true,
	}
	return user, nil
}
func (service *MockUserService) GetAll() ([]repository.User, error) {
	var users []repository.User = make([]repository.User, 2)
	
	user := repository.User{
		ID:       uuid.New(),
		Username: "testuser",
		Email:    "@example.com",
		BCryptHash: "----------------",
		Admin:  true,
	}
	users = append(users, user)
	user.ID = uuid.New()
	users = append(users, user)
	
	return users, nil
}

func (service *MockUserService) Update(user_id uuid.UUID, profile_name string) (*repository.User, error) {
	user := repository.User{
		ID:       user_id,
		Username: profile_name,
		Email:    "@example.com",
		BCryptHash: "----------------",
		Admin:  true,
	}
	return &user, nil
}

func (service *MockUserService) Remove(id uuid.UUID) error {
	return nil
}
`

func TestSERVICES_MockUserServiceTemplate(t *testing.T) {
	// load the template
	temp := templates.SERVICES_MockUserServiceTemplate
	templateTest := template.Must(template.New("mock_user_service.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "mock_user_service.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultSERVICES_MockUserServiceTemplate {
		diff := Diff(stringWriter.String(), ResultSERVICES_MockUserServiceTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
