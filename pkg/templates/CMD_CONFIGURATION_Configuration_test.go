package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultCmdConfigurationConfigurationTemplate = `
/* Generated by egg v0.0.1 */

package configuration

import (
	"errors"
	"os"

	"gopkg.in/yaml.v3"
)

type Configuration struct {
	Namespace string ` + "`" + `yaml:"namespace"` + "`" + `
	Name      string ` + "`" + `yaml:"name"` + "`" + `
	Semver    string ` + "`" + `yaml:"semver"` + "`" + `
	License   string ` + "`" + `yaml:"license"` + "`" + `
	Copyright struct {
		Year   int    ` + "`" + `yaml:"year"` + "`" + `
		Author string ` + "`" + `yaml:"author"` + "`" + `
	} ` + "`" + `yaml:"copyright"` + "`" + `
	Server struct {
		JWT      string ` + "`" + `yaml:"jwt"` + "`" + `
		Port     int    ` + "`" + `yaml:"port"` + "`" + `
		Frontend struct {
			Dir string ` + "`" + `yaml:"dir"` + "`" + `
			Api string ` + "`" + `yaml:"api"` + "`" + `
		} ` + "`" + `yaml:"frontend"` + "`" + `
	} ` + "`" + `yaml:"server"` + "`" + `
	Database struct {
		URL                    string ` + "`" + `yaml:"url"` + "`" + `
		Sqlc                   string ` + "`" + `yaml:"sqlc"` + "`" + `
		SqlcRepositoryLocation string ` + "`" + `yaml:"repository"` + "`" + `
		QueriesLocation        string ` + "`" + `yaml:"queries"` + "`" + `
		Migration              struct {
			Protocol    string ` + "`" + `yaml:"protocol"` + "`" + `
			Destination string ` + "`" + `yaml:"destination"` + "`" + `
		} ` + "`" + `yaml:"migration"` + "`" + `
	} ` + "`" + `yaml:"database"` + "`" + `
	Cache struct {
		URL string ` + "`" + `yaml:"url"` + "`" + `
	} ` + "`" + `yaml:"cache"` + "`" + `
	S3 struct {
		URL    string ` + "`" + `yaml:"url"` + "`" + `
		Access string ` + "`" + `yaml:"access"` + "`" + `
		Secret string ` + "`" + `yaml:"secret"` + "`" + `
	} ` + "`" + `yaml:"s3"` + "`" + `
}

const ConfigurationDir = "config/"

func LoadConfiguration(environment string) (*Configuration, error) {
	configuration := new(Configuration)
	configurationFile := ConfigurationDir + environment + ".yaml"
	file, err := os.ReadFile(configurationFile)
	if err != nil {
		return configuration, err
	}
	if err = yaml.Unmarshal(file, configuration); err != nil {
		return configuration, err
	}
	return configuration, nil
}

func SaveConfiguration(configBytes []byte, environment string) error {
	configurationFile := ConfigurationDir + environment + ".yaml"
	if _, err := os.Stat(configurationFile); errors.Is(err, os.ErrNotExist) {
		return err
	}
	if err := os.WriteFile(configurationFile, configBytes, 0777); err != nil {
		return err
	}
	return nil
}

func (configuration *Configuration) GenerateConfigurationFile(environment string) error {
	// create the config directory if not exists config/
	if _, err := os.Stat(ConfigurationDir); errors.Is(err, os.ErrNotExist) {
		if err := os.Mkdir(ConfigurationDir, 0777); err != nil {
			return err
		}
	}
	if _, err := os.Stat(ConfigurationDir + environment + ".yaml"); errors.Is(err, os.ErrNotExist) {
		if _, err := os.Create(ConfigurationDir + environment + ".yaml"); err != nil {
			return err
		}
	}
	// write to the file with the yaml content as the configuration
	configBytes, err := yaml.Marshal(configuration)
	if err != nil {
		return err
	}
	if err := SaveConfiguration(configBytes, environment); err != nil {
		return err
	}
	return nil
}
`

func TestCmdConfigurationConfigurationTemplate(t *testing.T) {
	// load the template
	temp := templates.CmdConfigurationConfigurationTemplate
	templateTest := template.Must(template.New("configuration.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "configuration.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultCmdConfigurationConfigurationTemplate {
		diff := Diff(stringWriter.String(), ResultCmdConfigurationConfigurationTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
