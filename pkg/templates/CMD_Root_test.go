package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultRootCmdTemplate = `
/* Generated by egg v0.0.1
Copyright Â© 2022 Adam Kalinowski

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/adamkali/egg/cmd/configuration"
	"github.com/adamkali/egg/controllers"
	_ "github.com/adamkali/egg/docs"
	"github.com/labstack/echo/v4"
	"github.com/spf13/cobra"
)

var Environment string

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "egg",
	Short: "Serve the application",
	Long: ` + "`" + `
	*** Help Text
	Serve the application.
	The default environment used with this is development,
	So configured the application is opend at 

	http://localhost:8080

	This can be altered in the 

	host: 0.0.0.0
	port: 8080

	section of the config file. use -e environment when 
	calling this command to run serve using the configured 
	values.

	*** Command 
	**** Default 
	--- bash
	go build main.go -o egg
	./egg 
	---

	**** with -e passed
	If one had some configuration file really-sick-config.yaml
	--- bash
	go build main.go -o egg
	./egg -e really-sick-config
	---
	` + "`" + `,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	Run: func(cmd *cobra.Command, args []string) {
		config, err := configuration.LoadConfiguration(Environment)
		if err != nil {
			fmt.Print(err.Error())
			os.Exit(1)
		}
		serve(config)
		print("ðŸ¥š")
		os.Exit(1)
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
	os.Exit(0)

}
func init() {
	rootCmd.PersistentFlags().StringVarP(&Environment, "environment", "e", "development", "Choose what environment that should be used when running. Default is development")
}

func serve(config *configuration.Configuration) {
	e := echo.New()
	e.HideBanner = true

    controllers.RegisterRoutes(e, config)

	fmt.Printf(` + "`" + `
	           â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ        
	         â–ˆâ–ˆ                â–ˆâ–ˆ      
	     â–ˆâ–ˆâ–ˆâ–ˆ    â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘        â–ˆâ–ˆ    
	   â–ˆâ–ˆ      â–‘â–‘      â–‘â–‘â–‘â–‘        â–ˆâ–ˆ  
	 â–ˆâ–ˆ      â–‘â–‘          â–‘â–‘â–‘â–‘        â–ˆâ–ˆ
	 â–ˆâ–ˆ      â–‘â–‘          â–‘â–‘â–‘â–‘        â–ˆâ–ˆ
	â–ˆâ–ˆ        â–‘â–‘â–’â–’â–‘â–‘  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘        â–ˆâ–ˆ
	â–ˆâ–ˆâ–‘â–‘        â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘        â–‘â–‘â–ˆâ–ˆ
	  â–ˆâ–ˆâ–‘â–‘        â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘        â–‘â–‘â–ˆâ–ˆ  
	  â–ˆâ–ˆâ–‘â–‘â–‘â–‘                    â–‘â–‘â–ˆâ–ˆ    
	    â–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘            â–‘â–‘â–‘â–‘â–ˆâ–ˆ      
 	       â–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆ        
	           â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ            

	EGG v0.0.0
	%s:%s
	` + "`" + `, config.Name, config.Semver)

	e.Logger.Fatal(e.Start(":" + strconv.Itoa(config.Server.Port)))
}
`

func TestRootCmdTemplate(t *testing.T) {
	// load the template
	temp := templates.RootCmdTemplate
	templateTest := template.Must(template.New("root.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "root.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultRootCmdTemplate {
		diff := Diff(stringWriter.String(), ResultRootCmdTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
