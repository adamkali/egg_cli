package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultSQLCYamlTemplate = `
# Generated by egg v0.0.1

version: "2"
sql:
  - engine: "postgres"
    schema: "db/migrations"
    queries: "db/queries"
    gen:
      go:
        emit_json_tags: true
        package: "repository"
        out: "db/repository"
        sql_package: "pgx/v5"
        emit_pointers_for_null_types: true
        overrides:
          - db_type: "uuid"
            go_type:
              import: "github.com/google/uuid"
              type: "UUID"
          - db_type: "pg_catalog.timestamptz"
            go_type:
              pointer: true
              import: "time"
              type: "Time"
          - db_type: "pg_catalog.timestamp"
            go_type:
              pointer: true
              import: "time"
              type: "Time"
          - db_type: "text"
            go_type:
              pointer: true
              type: "string"
          - db_type: "pgtype.text"
            go_type:
              pointer: true
              type: "string"
`

func TestSQLCYamlTemplate(t *testing.T) {
	// load the template
	temp := templates.SQLCYamlTemplate
	templateTest := template.Must(template.New("sqlc.yaml").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "sqlc.yaml", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultSQLCYamlTemplate {
		diff := Diff(stringWriter.String(), ResultSQLCYamlTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
