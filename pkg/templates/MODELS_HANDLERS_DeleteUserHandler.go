package templates

const MODELS_HANDLERS_DeleteUserHandlerTemplate = `
/* Generated by egg v0.0.1 */

package handlers

import (
	"fmt"

	"{{.Namespace}}/internal/repository"
	"{{.Namespace}}/models/responses"
	"{{.Namespace}}/services"
	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

type DeleteUserHandler struct {
	Ok      string
	Admin   *repository.User
	UserID  uuid.UUID
	Context echo.Context
	Error   error
	Code    int
	Locked  bool
}

func NewDeleteUserHandler(ctx echo.Context) *DeleteUserHandler {
	return &DeleteUserHandler{
		Context: ctx,
		Locked:  false,
		Error:   nil,
		Code:    200,
	}
}
func (h *DeleteUserHandler) Lock(code int) *DeleteUserHandler {
	h.Locked = true
	h.Code = code
	return h
}

func (h *DeleteUserHandler) Handle(fun any) *DeleteUserHandler {
	var code int
	if !h.Locked {
		switch handle := fun.(type) {
		case func(token string) error:
			jwt_token := h.Context.Get("user").(*jwt.Token)
			claims := jwt_token.Claims.(*services.CustomJwt)
			h.UserID = claims.UserId
			h.Error = handle(jwt_token.Raw)
			if h.Error!= nil {
				code = 401
				break
			}
		case func(user_id uuid.UUID) (*repository.User, error):
			h.Admin, h.Error = handle(h.UserID)
			if h.Error != nil {
				code = 404
				break
			}
			if !h.Admin.Admin {
				code = 403
				h.Error = echo.NewHTTPError(code, "Not Admin")
				break
			}
		case func(user_id uuid.UUID) error:
			var delete_user_id_parsed uuid.UUID
			delete_user_id := h.Context.Param("user_id")
			delete_user_id_parsed, h.Error = uuid.Parse(delete_user_id)
			h.Error = handle(delete_user_id_parsed)
			if h.Error != nil {
				code = 500
				break
			}
			h.Ok = "Successfully deleted: " + delete_user_id
		default:
			code = 600
			h.Error = echo.NewHTTPError(
				code,
				fmt.Sprintf("Type assertion failed for type: %T\n", fun),
			)
		}
		if h.Error != nil {
			return h.Lock(code)
		}
	}
	return h
}

func (h *DeleteUserHandler) JSON() error {
	var code int
	var message string
	if h.Locked && h.Error != nil {
		code = h.Code
		if code == 600 {
			message = "Misaligend handler on the server"
		} else {
			message = h.Error.Error()
		}
	} else {
		message = "OK"
		code = 200
	}
	return h.Context.JSON(code, responses.StringResponse{
		Data:    &h.Ok,
		Success: !h.Locked,
		Message: message,
	})
}
`
