package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultSERVICES_IUserServiceTemplate = `
/* Generated by egg v0.0.1 */

package services

import (
	"github.com/adamkali/egg/internal/repository"
	"github.com/adamkali/egg/models/requests"
	"github.com/google/uuid"
)


// IUserService interface
//
// This interface defines the methods that a user service should implement.
// It is used to define the contract between the the application and the user database table.
// The interface contains the methods that a user service should implement. By abstracting the
// implementation details of the user database table, the user service can be easily tested.
// and if needed, switched very easily to a different database.
type IUserService interface {
	// Create a new user
	// 
	// This function takes a NewUserRequest object and returns a User object.
	// If the user already exists, an error is returned.
	Create(params *requests.NewUserRequest) (*repository.User, error)
	// Login a user
	// 
	// This function takes a requests.LoginRequest object and returns a repository.User object.
	// This can be used with either a username or email address to log in a user.
	Login(params *requests.LoginRequest) (*repository.User, error)
	// Get a user by id
	// 
	// This function takes a uuid.UUID object and returns a repository.User object.
	// If the user does not exist, an error is returned.
	Get(id uuid.UUID) (*repository.User, error)
	// Remove a user by id
	//
	// This function takes a uuid.UUID object and returns an error if the user does not exist.
	Remove(id uuid.UUID) error
	// Get all users
	// 
	// This function returns a slice of repository.User objects.
	// should only error if something internal in the database goes wrong
	// [WARN] Should only be used for debugging.
	GetAll() ([]repository.User, error)
	// Update a user by id
	//
	// This function takes a uuid.UUID object and a string object and returns a repository.User object.
	// If the user does not exist, an error is returned.
	Update(user_id uuid.UUID, profil_name string ) (*repository.User, error)
}
`

func TestSERVICES_IUserServiceTemplate(t *testing.T) {
	// load the template
	temp := templates.SERVICES_IUserServiceTemplate
	templateTest := template.Must(template.New("i_user_service.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "i_user_service.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultSERVICES_IUserServiceTemplate {
		diff := Diff(stringWriter.String(), ResultSERVICES_IUserServiceTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
