package templates
const UpCmdTemplate = `
/* Generated by egg v0.0.1
Copyright Â© {{.Copyright.Year}} {{.Copyright.Author}}

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"bufio"
	"errors"
	"os"
	"os/exec"

	"{{.Namespace}}/cmd/configuration"
	"github.com/spf13/cobra"
)

// upCmd represents the up command
var upCmd = &cobra.Command{
	Use:   "up",
	Short: "This command uses sql to generate the repository code from the` + " `internal/migrations`." + `,
	Long: ` + "`" + `
*** Help Text
This command calls goose migrations under the hood. And by default it uses 
the following environment variables:

--- .env
GOOSE_DRIVER=config.Server.Database.Migration.Protocol
GOOSE_DBSTRING=config.Server.Database.Url
GOOSE_MIGRATION_DIR=config.Server.Database.Migration.Destination
---

this is effectively goose up

*** Command 
**** Default 
--- bash
go build main.go -o {{.Name }} 
{{.Name }} db up 
---

**** with -e passed
@code bash
--- bash
go build main.go -o {{.Name }}
{{.Name }} db up -e really-sick-config
---
` + "`" + `,
	Run: func(cmd *cobra.Command, args []string) {
        config, err := configuration.LoadConfiguration(Environment) 
        if err != nil {
            panic(err)
        }
        if err = Up(config, args); err != nil {
            print(err.Error())
            panic(err)
        }
        print("ðŸ¥š Goose Up Successful")
	},
}

func init() {
	dbCmd.AddCommand(upCmd)
}

func Up(configuration *configuration.Configuration, args []string) error {
    os.Setenv("GOOSE_DRIVER", configuration.Database.Migration.Protocol)
    os.Setenv("GOOSE_MIGRATION_DIR", configuration.Database.Migration.Destination)
    os.Setenv("GOOSE_DBSTRING", configuration.Database.URL)
    print(configuration.Database.Migration.Destination)
    if len(args) != 0 {
        return errors.New("len(args) != 0 so the cli does not know what to do.")
    }

    output, err := exec.Command("goose", "up").Output()
    if err != nil {
        return err
    }
    writer := bufio.NewWriter(os.Stdout)
    _, err = writer.Write(output)
    if err != nil {
        return err
    }
    return nil
}

`
