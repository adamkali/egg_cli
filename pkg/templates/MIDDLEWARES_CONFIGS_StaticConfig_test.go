package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMIDDLEWARES_CONFIGS_StaticConfigTemplate = `
/* Generated by egg v0.0.1 */

package configs

import (
	"strings"

	"github.com/adamkali/egg/cmd/configuration"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func StaticMiddlewareConfig(config *configuration.Configuration) middleware.StaticConfig {
	return middleware.StaticConfig{
		Root:       config.Server.Frontend.Dir,
		HTML5:      true,
		Browse:     false,
		IgnoreBase: false,
		Filesystem: nil,
		Skipper: func(c echo.Context) bool {
			if strings.Contains(c.Path(), "swagger") {
				return true
			} else {
				return false
			}
		},
	}
}
`

func TestMIDDLEWARES_CONFIGS_StaticConfigTemplate(t *testing.T) {
	// load the template
	temp := templates.MIDDLEWARES_CONFIGS_StaticConfigTemplate
	templateTest := template.Must(template.New("static_config.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "static_config.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMIDDLEWARES_CONFIGS_StaticConfigTemplate {
		diff := Diff(stringWriter.String(), ResultMIDDLEWARES_CONFIGS_StaticConfigTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
