package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultSERVICES_ValidatorServiceTemplate = `
/* Generated by egg v0.0.1 */

package services

import (
	"context"
	"errors"
	"fmt"
	"net/mail"
	"regexp"
	"strings"
	"unicode"

	"github.com/adamkali/egg/cmd/configuration"
	"github.com/adamkali/egg/models/requests"
	"github.com/labstack/echo/v4"
)

// ValidatorService struct
//
// This is a static struct that is used to validate the request body
type ValidatorService struct{}

func (ValidatorService *ValidatorService) Promote(ctx context.Context, config *configuration.Configuration) *ValidatorService {
	return ValidatorService
}

func validateUsername(username string) bool {
	trimmed := strings.TrimSpace(username)
	if trimmed == "" {
		return false
	}
	pattern := ` + "`" + `^[a-zA-Z0-9]+$` + "`" + `
	_, err := regexp.MatchString(pattern, trimmed)
	if err != nil {
		return false
	}
	return true
}

func validatePassword(s string) (sevenOrMore, number, upper, special bool) {
	letters := 0
	for _, c := range s {
		switch {
		case unicode.IsNumber(c):
			number = true
		case unicode.IsUpper(c):
			upper = true
			letters++
		case unicode.IsPunct(c) || unicode.IsSymbol(c):
			special = true
		case unicode.IsLetter(c) || c == ' ':
			letters++
		default:
			//return false, false, false, false
		}
	}
	sevenOrMore = letters > 7
	return
}

// ValidateNewUserRequest
// 
// ValidateNewUserRequest validates the Body by using the echo.Context.Bind(requsts.NewUserRequest)
// and the returns the marshalled object
func (ValidatorService ValidatorService) ValidateNewUserRequest(e echo.Context) (*requests.NewUserRequest, error) {
	validRequest := new(requests.NewUserRequest)
	if err := e.Bind(&validRequest); err != nil {
		return nil, err
	}

	if !validateUsername(validRequest.Username) {
		return nil, fmt.Errorf("Validation failed (%s) is not a valid username", validRequest.Username)
	}

	_, err := mail.ParseAddress(validRequest.Email)
	if err != nil {
		return nil, err
	}

	sevenOrMore, number, upper, special := validatePassword(validRequest.Password)
	if !(sevenOrMore && number && upper && special) {
		return nil, fmt.Errorf(
			"Validation failed. Seven Or More (%t), Number (%t), Upper (%t), Special (%t)",
			sevenOrMore,
			number,
			upper,
			special)
	}

	return validRequest, nil
}

// ValidateLoginRequest validates the Body by using the echo.Context.Bind(requsts.LoginRequest)
// and the returns then last part
func (ValidatorService ValidatorService) ValidateLoginRequest(e echo.Context) (*requests.LoginRequest, error) {
	validRequest := new(requests.LoginRequest)
	if err := e.Bind(&validRequest); err != nil {
		return nil, err
	}
	return validRequest, nil
}


// Validate LoginFormRequest ()
func (vs  ValidatorService ) ValidateLoginFormRequest(e echo.Context) (*requests.LoginRequest, error) {
    req := &requests.LoginRequest {
		Username: e.FormValue("username"),
		Email: e.FormValue("email"),
		Password: e.FormValue("password"),
	};

	if (req.Email == "" && req.Username == "") {
		err := errors.New("Email and Username cannot be null")
		return nil, err
	} 
	if req.Password == "" {
		err := errors.New("You must send a password")
		return nil, err
	}
	return req, nil
}
`

func TestSERVICES_ValidatorServiceTemplate(t *testing.T) {
	// load the template
	temp := templates.SERVICES_ValidatorServiceTemplate
	templateTest := template.Must(template.New("validator_service.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "validator_service.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultSERVICES_ValidatorServiceTemplate {
		diff := Diff(stringWriter.String(), ResultSERVICES_ValidatorServiceTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
