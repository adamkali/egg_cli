package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMODELS_RESPONSE_StringResponseTemplate = `
/* Generated by egg v0.0.1 */

package responses

import (
	"github.com/labstack/echo/v4"
)

type StringResponse struct {
	Data    *string ` + "`" + `json:"data"` + "`" + `
	Success bool    ` + "`" + `json:"success"` + "`" + `
	Message string  ` + "`" + `json:"message"` + "`" + `
} // @name StringResponse

func NewStringResponse() *StringResponse {
	return &StringResponse{Success: false, Message: ""}
}

func (StringResponse *StringResponse) Fail(ctx echo.Context, code int, err error) error {
	StringResponse.Message = err.Error()
	return ctx.JSON(code, StringResponse)
}

func (StringResponse *StringResponse) Successful(ctx echo.Context, stringLike string) error {
	StringResponse.Data = &stringLike
	StringResponse.Success = true
	return ctx.JSON(200, StringResponse)
}

`

func TestMODELS_RESPONSE_StringResponseTemplate(t *testing.T) {
	// load the template
	temp := templates.MODELS_RESPONSE_StringResponseTemplate
	templateTest := template.Must(template.New("string_response.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "string_response.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMODELS_RESPONSE_StringResponseTemplate {
		diff := Diff(stringWriter.String(), ResultMODELS_RESPONSE_StringResponseTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
