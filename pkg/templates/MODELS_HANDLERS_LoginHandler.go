package templates

const MODELS_HANDLERS_LoginHandlerTemplate = `
/* Generated by egg v0.0.1 */

package handlers

import (
	"fmt"

	"{{.Namespace}}/internal/repository"
	"{{.Namespace}}/models/requests"
	"{{.Namespace}}/models/responses"
	"github.com/labstack/echo/v4"
)

type LoginHandler struct {
	Context       echo.Context
	Request       *requests.LoginRequest
	Authenticated *repository.User
	Token         *string
	Error         error
	Code          int
	Locked        bool
}

func NewLoginFormHandler(
	ctx echo.Context,
) *LoginHandler {
	handler := &LoginHandler{Locked: false, Context: ctx}
	return handler
}

func (h *LoginHandler) Handler(i any) *LoginHandler {
	var code int
	if !h.Locked {
		switch handler := i.(type) {
		case func(req repository.User) (*string, error):
			code = 500
			h.Token, h.Error = handler(*h.Authenticated)
		case func(*requests.LoginRequest) (*repository.User, error):
			code = 401
			h.Authenticated, h.Error = handler(h.Request)
			fmt.Printf("authenticate %v\n", h.Authenticated)
			if h.Authenticated == nil {
				h.Error = echo.NewHTTPError(code, "Request parameters could not find a user")
			}
		case func(e echo.Context) (*requests.LoginRequest, error):
			code = 400
			h.Request, h.Error = handler(h.Context)
		default:
			fmt.Printf("Type assertion failed for type: %T\n", i)
			code = 600
			h.Error = echo.NewHTTPError(code, "Misaligned handler on the server")
		}
		if h.Error != nil {
			return h.Lock(code)
		}
	}
	return h
}

func (h *LoginHandler) Lock(code int) *LoginHandler {
	h.Locked = true
	h.Code = code
	return h
}

func (h *LoginHandler) JSON() error {
	var code int
	var message string
	var jwt string
	if h.Token == nil {
		jwt = ""
	} else {
		jwt = *h.Token
	}
	if h.Locked && h.Error != nil {
		code = h.Code
		if code == 600 {
			message = "Misaligend handler on the server"
		} else {
			message = h.Error.Error()
		}
	} else {
		message = "OK"
		code = 200
	}
	return h.Context.JSON(code, responses.LoginResponse{
		Data:    responses.UserDataFromRepository(h.Authenticated),
		Success: !h.Locked,
		Message: message,
		JWT:     jwt,
	})
}

func (h *LoginHandler) Render() error {
	if h.Locked {
		return h.JSON()
	}
	return h.Context.Redirect(200, "/users/dashboard/"+h.Authenticated.ID.String())
}
`
