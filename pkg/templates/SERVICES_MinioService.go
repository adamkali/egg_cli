package templates

const SERVICES_MinioServiceTemplate = `
/* Generated by egg v0.0.1 */

package services

import (
	"context"
	"io"
	"net/url"
	"time"

	"{{.Namespace}}/cmd/configuration"
	"github.com/google/uuid"
	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
)

type MinioService struct {
	ctx    context.Context
	client *minio.Client
}

// Returns a refrence to a new UserService to be used in the controller
func CreateMinioService(ctx context.Context, config *configuration.Configuration) *MinioService {
	// Initialize minio client object.
	minioClient, err := minio.New(config.S3.URL, &minio.Options{
		Creds:  credentials.NewStaticV4(config.S3.Access, config.S3.Secret, ""),
		Secure: true,
	})
	if err != nil {
		panic(err.Error())
	}
	return &MinioService{ctx, minioClient}
}

// Upload
//
// params:
//   uploaderID: uuid.UUID
//   uploadName: string
//   uploadFile: io.Reader
//   size: int64
// returns:
//   error
//
// Uploads a file to S3 compatible storage. If the bucket does not exist, it will be created.
// If the file already exists, it will be overwritten.
// 
// The function should return an error only if there is a problem uploading the file, or if 
// when creating the bucket something went wrong.
func (MinioService *MinioService) Upload(uploaderID uuid.UUID, uploadName string, uploadFile io.Reader, size int64) error {
	exists, err := MinioService.client.BucketExists(MinioService.ctx, uploaderID.String())
	if err != nil {
		return err
	} else if !exists {
		opts := minio.MakeBucketOptions{}
		errMakeBucket := MinioService.client.MakeBucket(MinioService.ctx, uploaderID.String(), opts)
		if errMakeBucket != nil {
			return err
		}
	}
	_, err = MinioService.client.PutObject(MinioService.ctx, uploaderID.String(), uploadName, uploadFile, size, minio.PutObjectOptions{})
	if err != nil {
		return err
	}
	return nil
}

// Get
//
// params:
//   uploaderID: uuid.UUID
//   uploadName: string
// returns:
//   []byte
//   error
//
// Gets a file from S3 compatible storage. If the file does not exist, it will return an error.
func (MinioService *MinioService) Get(uploaderID uuid.UUID, uploadName string) ([]byte, error) {
	opts := minio.GetObjectOptions{}
	object, err := MinioService.client.GetObject(MinioService.ctx, uploaderID.String(), uploadName, opts)
	if err != nil {
		return nil, err
	}
	defer object.Close()

	data, err := io.ReadAll(object)
	if err != nil {
		return nil, err
	}

	return data, err
}

// GetPresigned
//
// params:
//   uploaderID: uuid.UUID
//   uploadName: string
// returns:
//   string
//   error
//
// Gets a presigned url from S3 compatible storage. If the file does not exist, it will return an error.
func (m *MinioService) GetPresigned(uploaderID uuid.UUID, uploadName string) (string, error) {
	reqParams := make(url.Values)
	reqParams.Set("response-content-disposition", "attachment; filename=\""+uploadName+"\"")
	presigedUrl, err := m.client.PresignedGetObject(m.ctx, uploaderID.String(), uploadName, time.Hour*72, reqParams)
	if err != nil {
		return "", err
	}
	return presigedUrl.String(), nil
}
`
