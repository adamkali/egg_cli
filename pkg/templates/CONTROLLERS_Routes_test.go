package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultCONTROLLER_RoutesTemplate = `
/* Generated by egg v0.0.1 */

package controllers

import (
	"net/http"

	"github.com/adamkali/egg/cmd/configuration"
	"github.com/adamkali/egg/middlwares/configs"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

func RegisterRoutes(e *echo.Echo, config *configuration.Configuration) {
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
    e.Use(middleware.RequestID())

	// here is an example of where you can load in your 
	// More complex Middle ware configs as you go through the 
	// development.
	e.Use(middleware.StaticWithConfig(configs.StaticMiddlewareConfig(config)))

	params, err := createControllerParams(config)
	if err != nil {
		panic(err)
	}
	// please add your controllers that implement IController after Build UserController(params) 
	// AttatchControllers(e, BuildUserController(params), BuildFooBarController(params))
	AttatchControllers(e, config, BuildUserController(params))

	e.Static("/public", "public")
	e.GET("/api/_health", func(ctx echo.Context) error {
		return ctx.JSON(http.StatusOK, map[string]any{"ok": true})
	})
	e.GET("/swagger/*", echoSwagger.WrapHandler)
}
`

func TestCONTROLLER_RoutesTemplate(t *testing.T) {
	// load the template
	temp := templates.CONTROLLER_RoutesTemplate
	templateTest := template.Must(template.New("routes.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "routes.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultCONTROLLER_RoutesTemplate {
		diff := Diff(stringWriter.String(), ResultCONTROLLER_RoutesTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
