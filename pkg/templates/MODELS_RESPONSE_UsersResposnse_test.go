package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMODELS_RESPONSE_UsersResponseTemplate = `
/* Generated by egg v0.0.1 */

package responses

import (
	"github.com/adamkali/egg/internal/repository"
	"github.com/labstack/echo/v4"
)

type UsersResponse struct {
	Data    []UserData ` + "`" + `json:"data"` + "`" + `
	Success bool              ` + "`" + `json:"success"` + "`" + `
	Message string            ` + "`" + `json:"message"` + "`" + `
} // @name UsersResponse

func NewUsersResponse() *UsersResponse {
	return &UsersResponse{Success: false, Message: ""}
}


func (UsersResponse *UsersResponse) Fail(ctx echo.Context, code int, err error) error {
	UsersResponse.Message = err.Error()
	return ctx.JSON(code, UsersResponse)
}

func (UsersResponse *UsersResponse) Successful(ctx echo.Context, users []repository.User) error {
	UsersResponse.Data = make([]UserData, len(users))
	for i, val := range users {
		 UsersResponse.Data[i] = *UserDataFromRepository(&val)
	}
	UsersResponse.Success = true
	return ctx.JSON(200, UsersResponse)
}
`

func TestMODELS_RESPONSE_UsersResponseTemplate(t *testing.T) {
	// load the template
	temp := templates.MODELS_RESPONSE_UsersResponseTemplate
	templateTest := template.Must(template.New("users_response.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "users_response.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMODELS_RESPONSE_UsersResponseTemplate {
		diff := Diff(stringWriter.String(), ResultMODELS_RESPONSE_UsersResponseTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
