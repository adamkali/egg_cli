package templates

const MODELS_HANDLERS_UploadProfilePictureHandlerTemplate = `
/* Generated by egg v0.0.1 */

package handlers

import (
	"fmt"
	"io"
	"mime/multipart"

	"{{.Namespace}}/internal/repository"
	"{{.Namespace}}/models/responses"
	"{{.Namespace}}/services"
	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

type UploadProfilePictureHandler struct {
	UserUploadFilename          string
	UserResponse 				*repository.User
	UserID                      uuid.UUID
	Context                     echo.Context
	Error                       error
	Code                        int
	Locked                      bool
}

func NewUploadProfilePictureHandler(ctx echo.Context) *UploadProfilePictureHandler {
	return &UploadProfilePictureHandler {
		Context: ctx,
		Locked:  false,
		Error:   nil,
		Code:    200,
	}
}

func (h *UploadProfilePictureHandler) Lock(code int) *UploadProfilePictureHandler{
	h.Locked = true
	h.Code = code
	return h
}

func (h *UploadProfilePictureHandler) Handle(fun any) *UploadProfilePictureHandler {
	var code int
	if !h.Locked {
		switch handle := fun.(type) {
		case func(token string) error:
			jwt_token := h.Context.Get("user").(*jwt.Token)
			claims := jwt_token.Claims.(*services.CustomJwt)
			h.UserID = claims.UserId
			h.Error = handle(jwt_token.Raw)
			code = 401
		case func(
			uploaderID uuid.UUID,
			uploadName string,
			uploadFile io.Reader,
			size int64,
		) error :
			var file *multipart.FileHeader
			var src multipart.File
			file, h.Error = h.Context.FormFile("file")
			if h.Error != nil {
				code = 400
				break
			}
			src, h.Error = file.Open()
			defer src.Close()
			h.UserUploadFilename = file.Filename
			h.Error = handle(h.UserID, h.UserUploadFilename, src, file.Size)
			code = 500
		case func(user_id uuid.UUID, profile_name string) (*repository.User, error):
			h.UserResponse, h.Error = handle(h.UserID, h.UserUploadFilename)
			code = 500
		default:
			fmt.Printf("Type assertion failed for type: %T\n", fun)
			code = 600
			h.Error = echo.NewHTTPError(code, "Misaligned handler on the server")
		}
		if h.Error != nil {
			return h.Lock(code)
		}
	}
	return h
}


func (h *UploadProfilePictureHandler) JSON() error {
	var code int
	var message string
	if h.Locked && h.Error != nil {
		code = h.Code
		if code == 600 {
			message = "Misaligend handler on the server"
		} else {
			message = h.Error.Error()
		}
	} else if code == 200 {
		message = "OK"
	}
	return h.Context.JSON(code, responses.UserResponse{
		Message: message,
		Success: !h.Locked,
		Data: responses.UserDataFromRepository(h.UserResponse),
	})

}

`
