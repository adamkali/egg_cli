package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultGenerateCmdTemplate = `
/* Generated by egg v0.0.1
Copyright ¬© 2022 Adam Kalinowski

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"bufio"
	"errors"
	"os"
	"os/exec"

	"github.com/adamkali/egg/cmd/configuration"
	"github.com/spf13/cobra"
)

// generateCmd represents the generate command
var generateCmd = &cobra.Command{
	Use:   "generate",
	Short: "This command uses sqlc to generate the repository code from the ` + "`internal/queries`. `" + `,
	Long: ` + "`" + `
*** Help Text
This command uses sql to generate the repository code from the internal/queries. 
this command also uses sqlc under the hood so refrence their documentation for generateing code from that.
to configure sqlc please check in the root of the project in sqlc.yml

*** Command 
**** Default 
--- bash
go build main.go -o egg 
egg db generate 
---

**** with -e passed
--- bash
go build main.go -o egg
egg db generate -e really-sick-config
---
` + "`" + `,
	Run: func(cmd *cobra.Command, args []string) {
		config, err := configuration.LoadConfiguration(Environment)
		if err != nil {
			panic(err)
		}
		if err := Gen(config, args); err != nil {
			panic(err)
		}
		print("ü•ö Sqlc Generate Successful")
	},
}

func init() { dbCmd.AddCommand(generateCmd) }

func Gen(configuration *configuration.Configuration, args []string) error {
	if len(args) != 0 {
		return errors.New("üç≥ len(args) != 0 so egg does not know what to do with this.")
	}

	output, err := exec.Command("sqlc", "generate").Output()
	if err != nil {
		return err
	}
	writer := bufio.NewWriter(os.Stdout)
	_, err = writer.Write(output)
	if err != nil {
		return err
	}
	return nil
}
`

func TestGenerateCmdTemplate(t *testing.T) {
	// load the template
	temp := templates.GenerateCmdTemplate
	templateTest := template.Must(template.New("generate.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "generate.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultGenerateCmdTemplate {
		diff := Diff(stringWriter.String(), ResultGenerateCmdTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
