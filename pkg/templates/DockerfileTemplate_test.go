package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultDockerfileTemplate = `
# Generated by egg v0.0.1
## Build the Frontend with Node.js
## If you are not using React you can comment out this section
FROM node:22-alpine as node_builder
WORKDIR /usr/src/frontend
COPY frontend/package.json ./
## use pnpm
RUN npm install -g pnpm && pnpm install
COPY frontend/ ./
RUN pnpm run build

FROM golang:1.24-alpine as go_builder

WORKDIR /usr/src
COPY go.* ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o egg .

# Copy the executable to the final image
FROM alpine:latest as app

WORKDIR /app

## If you are not using React you can comment out this section
COPY --from=node_builder /usr/src/frontend/dist /app/web/dist

COPY --from=go_builder /usr/src/egg /app/
CMD ["/app/egg", "-e", "production"]
`

func TestDockerfileTemplate(t *testing.T) {
	// load the template
	temp := templates.DockerfileTemplate
	templateTest := template.Must(template.New("Dockerfile").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "Dockerfile", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultDockerfileTemplate {
		diff := Diff(stringWriter.String(), ResultDockerfileTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
