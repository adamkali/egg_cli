package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMODELS_RESPONSE_LoginResponseTemplate = `
/* Generated by egg v0.0.1 */

package responses

import (
	"github.com/adamkali/egg/internal/repository"
	"github.com/labstack/echo/v4"
)

type LoginResponse struct {
	Data    *UserData ` + "`" + `json:"data"` + "`" + `
	JWT     string    ` + "`" + `json:"jwt"` + "`" + `
	Success bool      ` + "`" + `json:"success"` + "`" + `
	Message string    ` + "`" + `json:"message"` + "`" + `
} // @name LoginResponse

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{Success: false, Message: ""}
}

func (LoginResponse *LoginResponse) Fail(ctx echo.Context, code int, err error) error {
	LoginResponse.Message = err.Error()
	return ctx.JSON(code, LoginResponse)
}

func (LoginResponse *LoginResponse) Successful(ctx echo.Context, user *repository.User, token string) error {
	LoginResponse.Data = UserDataFromRepository(user)
	LoginResponse.JWT = token
	LoginResponse.Success = true
	return ctx.JSON(200, LoginResponse)
}

func (LoginResponse *LoginResponse) Handle(
	ctx echo.Context,
	user *repository.User,
	code int,
	token string,
	err error,
) error {
	if err != nil {
		return err
	}
	return ctx.Redirect(200, "/dashboard/"+user.ID.String())
}
`

func TestMODELS_RESPONSE_LoginResponseTemplate(t *testing.T) {
	// load the template
	temp := templates.MODELS_RESPONSE_LoginResponseTemplate
	templateTest := template.Must(template.New("login_response.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "login_response.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMODELS_RESPONSE_LoginResponseTemplate {
		diff := Diff(stringWriter.String(), ResultMODELS_RESPONSE_LoginResponseTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
