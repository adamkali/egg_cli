package templates_test

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/adamkali/egg_cli/pkg/templates"
)

const ResultMIDDLEWARES_CONFIGS_AuthConfigTemplate = `
/* Generated by egg v0.0.1 */

package configs

import (
	"strings"

	"github.com/golang-jwt/jwt/v5"
	echojwt "github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
	"github.com/adamkali/egg/services"
	"github.com/adamkali/egg/cmd/configuration"
)

func AuthMiddlewareConfig(config *configuration.Configuration) echojwt.Config {
	return echojwt.Config {
		SuccessHandler: func(c echo.Context) {
			logger := c.Logger()
			logger.Info("Success Recognized Token")
		},
		ErrorHandler: func(c echo.Context, err error) error {
			logger := c.Logger()
			logger.Error(err.Error())
			return c.JSON(401, map[string]string{"message": err.Error()})
		},
		SigningKey: []byte(config.Server.JWT),
		Skipper: func(c echo.Context) bool {
			if strings.Contains(c.Path(), "swagger") {
				return true
			} else {
				return false
			}
		},
		NewClaimsFunc: func(c echo.Context) jwt.Claims {
			return new(services.CustomJwt)
		},
	}
}

`

func TestMIDDLEWARES_CONFIGS_AuthConfigTemplate(t *testing.T) {
	// load the template
	temp := templates.MIDDLEWARES_CONFIGS_AuthConfigTemplate
	templateTest := template.Must(template.New("auth_config.go").Parse(temp))

	// execute the template
	stringWriter := new(bytes.Buffer)
	err := templateTest.ExecuteTemplate(stringWriter, "auth_config.go", createConfiguration())
	if err != nil {
		t.Error(err)
	}

	// check the result
	if stringWriter.String() != ResultMIDDLEWARES_CONFIGS_AuthConfigTemplate {
		diff := Diff(stringWriter.String(), ResultMIDDLEWARES_CONFIGS_AuthConfigTemplate)
		for i, v := range diff {
			t.Errorf("line %d: expected %s, got %s", i, v.Expected, v.Actual)
		}
	}
}
