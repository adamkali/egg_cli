package templates
const CONTROLLERS_UserControllerTemplate = `
package controllers
/* Generated by egg v0.0.1 */

import (
	"errors"

	"{{.Namespace}}/cmd/configuration"
	"{{.Namespace}}/models/handlers"
	"{{.Namespace}}/models/responses"
	"{{.Namespace}}/services"
	"github.com/golang-jwt/jwt/v5"
	"github.com/labstack/echo/v4"
)

type UserController struct {
	Name             string
	Config           *configuration.Configuration
	AuthService      services.IAuthService
	UserService      services.IUserService
	MinioService     services.IMinioService
	RedisService     services.IRedisService
	ValidatorService *services.ValidatorService
}

func BuildUserController(p *Registrar) UserController {
	return UserController{
		Name:             "/users",
		Config:           p.Config,
		AuthService:      p.AuthService,
		MinioService:     p.MinioService,
		UserService:      p.UserService,
		RedisService:     p.RedisService,
		ValidatorService: p.ValidatorService,
	}
}

// @Summary Delete User by their UUID
// @Description get string by ID
//
// @ID          DeleteUserByUUID
// @Tags        Users
// @Produce     json
// @Param       user_id             path         string                         true "User Id"          default("e38e78a4-2ca3-4c59-a3ea-a2019866e593")
// @Param       Authorization       header       string                         true "admin header"     default("Bearer token")
// @Success     200                 {object}     responses.DeleteUserResponse
// @Router      /users/{user_id}    [delete]
func (UserController *UserController) DeleteUser(ctx echo.Context) error {
	return handlers.NewDeleteUserHandler(ctx).
		Handle(UserController.AuthService.CheckToken). // Check if the user is signed in 
		Handle(UserController.UserService.Get).        // Get the User from the repository
		Handle(UserController.UserService.Remove).     // Delete the user from the repository
		JSON()
}

// @Summary Signup to the app
// @Description Signup using the requests.NewUserRequest
//
// @ID          Signup
// @Tags        Users
// @Accept      json
// @Produce     json
// @Param       SignupRequest   body        NewUserRequest          true "Signup Request"
// @Success     200             {object}    responses.LoginResponse
// @Failure     400             {object}    responses.LoginResponse
// @Failure     500             {object}    responses.LoginResponse
// @Router      /users/signup   [post]
func (UserController *UserController) Signup(ctx echo.Context) error {
	return handlers.NewRegisterHandler(ctx).
		Handle(UserController.ValidatorService.ValidateNewUserRequest).
		Handle(UserController.UserService.Create).
		Handle(UserController.AuthService.Create).
		JSON()
}

// @Summary Login
// @Description to a user account with either email or username
//
// @ID          Login
// @Tags        Users
// @Accept      json
// @Produce     json
// @Param       LoginRequest body           LoginRequest            true "Log in request"
// @Success     200             {object}    responses.LoginResponse
// @Failure     400             {object}    responses.LoginResponse
// @Failure     401             {object}    responses.LoginResponse
// @Failure     500             {object}    responses.LoginResponse
// @Router      /users/login    [post]
func (uc *UserController) Login(ctx echo.Context) error {
	return uc.loginHandler(ctx).JSON()
}

// @Summary Get Current User
// @Description Get the Current User by the uuid storred in the Claims header
//
// @ID          GetCurrentLoggedInUser
// @Tags        Users
// @Produce     json
// @Param       authorization   header       string                         true "admin header"     default(Bearer token)
// @Success     200             {object}     responses.UserResponse
// @Failure     400             {object}     responses.UserResponse
// @Failure     401             {object}     responses.UserResponse
// @Router      /users/current  [get]
func (UserController *UserController) GetCurrent(ctx echo.Context) error {
	jwt_token := ctx.Get("user").(*jwt.Token)
	claims := jwt_token.Claims.(*services.CustomJwt)
	err := UserController.AuthService.CheckToken(jwt_token.Raw)
	if err != nil {
		return responses.NewUserResponse().Fail(ctx, 401, err)
	}
	user_data, err := UserController.UserService.Get(claims.UserId)
	if err != nil {
		return responses.NewUserResponse().Fail(ctx, 404, err)
	}
	return responses.NewUserResponse().Successful(ctx, user_data)
}

// @Summary		Upload file
// @Description	Upload file
//
// @ID				UploadProfilePicture
// @Tags            Users
// @Accept			multipart/form-data
// @Produce			json
// @Param			file				formData	file			true	"this is a test file"
// @Param           authorization		header      string          true	"admin header"        default(Bearer token)
// @Success		    200					{string}	UserResponse
// @Failure		    400					{object}	UserResponse
// @Failure		    404					{object}	UserResponse
// @Failure		    404					{object}	UserResponse
// @Router			/users/profile		[post]
func (UserController *UserController) UploadProfilePicture(ctx echo.Context) error {
	return handlers.NewUploadProfilePictureHandler(ctx).
		Handle(UserController.AuthService.CheckToken).
		Handle(UserController.MinioService.Upload).
		Handle(UserController.UserService.Update).
		JSON()
}

// @Summary Get User Profile by Authorization Header
// @Description Get User Profile by Authorization Header
//
// @ID          GetProfilePicture
// @Tags        Users
// @Produce     json
// @Param       Authorization       header       string                         true "admin header"     default(Bearer token)
// @Success     200                 {object}     responses.StringResponse
// @Failure     401                 {object}     responses.StringResponse
// @Failure     403                 {object}     responses.StringResponse
// @Failure     500                 {object}     responses.StringResponse
// @Router      /users/profile		[get]
func (UserController *UserController) GetProfile(ctx echo.Context) error {
	return handlers.NewGetProfilPictureHandler(ctx).
		Handle(UserController.AuthService.CheckToken).
		Handle(UserController.RedisService.Get).
		Handle(UserController.MinioService.GetPresigned).
		Handle(UserController.RedisService.SetWithExpiration).
		JSON()
}

func (uc *UserController) loginHandler(ctx echo.Context) *handlers.LoginHandler {
	return handlers.NewLoginFormHandler(ctx).
		Handler(uc.ValidatorService.ValidateLoginRequest).
		Handler(uc.UserService.Login).
		Handler(uc.AuthService.Update)
}

// @Summary Get All Users 
// @Description Get All Users. Must be Admin using the new mediator pattern
//
// @ID          GetUsers
// @Tags        Users
// @Produce     json
// @Param       Authorization       header       string                         true "admin header"     default(Bearer token)
// @Success     200                 {object}     UsersResponse
// @Failure     403                 {object}     UsersResponse
// @Failure     404                 {object}     UsersResponse
// @Failure     500                 {object}     UsersResponse
// @Router      /v2/users/			    [get]
func (uc *UserController) GetUsers(ctx echo.Context) error {
	return handlers.NewGetUsersHandler(ctx).
		Handle(uc.AuthService.CheckToken).
		Handle(uc.UserService.GetAll).
		JSON()
}

func (uc UserController) Attatch(e *echo.Echo, authMiddleware echo.MiddlewareFunc) {
	// Register the namespaces for the endopoints
	api := e.Group("/api" + uc.Name)
	api.GET("/", uc.GetUsers, authMiddleware)
	api.POST("/login", uc.Login)
	api.POST("/signup", uc.Signup)
	api.GET("/current", uc.GetCurrent, authMiddleware)
	api.POST("/profile", uc.UploadProfilePicture, authMiddleware)
	api.GET("/profile", uc.GetProfile, authMiddleware)
	api.DELETE("/:user_id", uc.DeleteUser, authMiddleware)
}
`
